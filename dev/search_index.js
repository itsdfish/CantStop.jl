var documenterSearchIndex = {"docs":
[{"location":"api/#Extendable-Types","page":"API","title":"Extendable Types","text":"","category":"section"},{"location":"api/#Required-Types","page":"API","title":"Required Types","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"AbstractPlayer","category":"page"},{"location":"api/#CantStop.AbstractPlayer","page":"API","title":"CantStop.AbstractPlayer","text":"AbstractPlayer\n\nAn abstract type for a player. Subtypes of AbstractPlayer must have the fields described below.\n\nFields\n\nid::Symbol: player id\n\nIn addition, for a subtype MyPlayer <: AbstractPlayer, the API requires the following constructor to ensure  the correct number of pieces are provided. \n\nConstructor\n\nMyPlayer(;id) = MyPlayer(id)\n\n\n\n\n\n","category":"type"},{"location":"api/#Optional-Types","page":"API","title":"Optional Types","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"AbstractGame","category":"page"},{"location":"api/#CantStop.AbstractGame","page":"API","title":"CantStop.AbstractGame","text":"AbstractGame\n\nAn abstract game type for Can't Stop. \n\nThe following fields are required in order to work with default methods: \n\nFields\n\ndice::Dice: an object resepresenting four dice \ncolumns::Dict{Int,T}: a dictionary representing columns 2-12. Each column is a vector of symbol vectors which contain the player ids \nc_idx::Vector{Int}: column indices of starting position of active piece \nr_idx::Vector{Int}: row indices of starting position of active pieace\npieces::Dict{Symbol,Vector{Symbol}}: inactive pieces for each player: player_id -> pieces\npiece_reserve::Vector{Symbol}: holds pieces for runners started at the beginning of the column\n\n\n\n\n\n","category":"type"},{"location":"api/#Required-Methods","page":"API","title":"Required Methods","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"CantStop.select_runners\nCantStop.take_chance\nCantStop.select_positions","category":"page"},{"location":"api/#CantStop.select_runners","page":"API","title":"CantStop.select_runners","text":"select_runners(game::AbstractGame, player::AbstractPlayer, outcome, i)\n\nArguments\n\ngame::AbstractGame: an abstract game object \nplayer::AbstractPlayer: an subtype of a abstract player\noutcome: outcome of dice roll\n\nReturns\n\nc_idx::Vector{Int}: a vector of column indices\nr_idx::Vector{Int}: a vector of row indices\n\n\n\n\n\n","category":"function"},{"location":"api/#CantStop.take_chance","page":"API","title":"CantStop.take_chance","text":"take_chance(game::AbstractGame, player::AbstractPlayer)\n\nArguments\n\ngame::AbstractGame: an abstract game object \nplayer::AbstractPlayer: an subtype of a abstract player\n\nReturns\n\ndecision::Bool: true if take chance, false otherwise\n\n\n\n\n\n","category":"function"},{"location":"api/#CantStop.select_positions","page":"API","title":"CantStop.select_positions","text":"select_positions(game::AbstractGame, player::AbstractPlayer, outcome)\n\nArguments\n\ngame::AbstractGame: an abstract game object \nplayer::AbstractPlayer: an subtype of a abstract player\noutcome: outcome of dice roll\n\nReturns\n\nc_idx::Vector{Int}: a vector of column indices\nr_idx::Vector{Int}: a vector of row indices\n\n\n\n\n\n","category":"function"},{"location":"api/#Available-Types","page":"API","title":"Available Types","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Game","category":"page"},{"location":"api/#CantStop.Game","page":"API","title":"CantStop.Game","text":"Game{T} <: AbstractGame\n\nFields\n\ndice::Dice: an object resepresenting four dice \ncolumns::Dict{Int,T}: a dictionary representing columns 2-12. Each column is a vector of symbol vectors which contain the player ids \nc_idx::Vector{Int}: column indices of starting position of active piece \nr_idx::Vector{Int}: row indices of starting position of active pieace\npieces::Dict{Symbol,Vector{Symbol}}: inactive pieces for each player: player_id -> pieces\n\n\n\n\n\n","category":"type"},{"location":"api/#Available-Methods","page":"API","title":"Available Methods","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"simulate\nlist_sums\nget_runner_locations","category":"page"},{"location":"api/#CantStop.simulate","page":"API","title":"CantStop.simulate","text":"simulate(game::AbstractGame, players)\n\nSimulate CantStop until a player has won. \n\nArguments\n\ngame::AbstractGame: an abstract game object \nplayers: a vector of players where elements are a subtype of a abstract player\n\n\n\n\n\n","category":"function"},{"location":"api/#CantStop.list_sums","page":"API","title":"CantStop.list_sums","text":"list_sums(game::AbstractGame, outcome)\n\nLists all unique sum of combinations of the outcome of rolling dice\n\nArguments\n\ngame::AbstractGame: an abstract game object \noutcome: the results of rolling the dice\n\n\n\n\n\n","category":"function"},{"location":"api/#CantStop.get_runner_locations","page":"API","title":"CantStop.get_runner_locations","text":"get_runner_locations(game)\n\nReturns runner locations. \n\nArguments\n\ngame::AbstractGame: an abstract game object \n\nReturns\n\nc_idx: column indices\nr_idx: row indices\n\n\n\n\n\n","category":"function"},{"location":"internal_methods/","page":"Internal Methods","title":"Internal Methods","text":"Modules = [CantStop]\nOrder   = [:type, :function]\nPublic = false","category":"page"},{"location":"internal_methods/#CantStop.clear_runners!-Tuple{Any}","page":"Internal Methods","title":"CantStop.clear_runners!","text":"clear_runners!(game)\n\nClear runners from board following a bust. \n\nArguments\n\ngame::AbstractGame: an abstract game object \n\n\n\n\n\n","category":"method"},{"location":"internal_methods/#CantStop.decision_phase!-Tuple{AbstractGame, AbstractPlayer}","page":"Internal Methods","title":"CantStop.decision_phase!","text":"decision_phase!(game::AbstractGame, player::AbstractPlayer)\n\nImplements the decision phase in which the player decides to roll the dice for the possibility of  moving the runners. The two methods named decide! are called during this phase.\n\nArguments\n\ngame::AbstractGame: an abstract game object \nplayer::AbstractPlayer: an subtype of a abstract player\n\n\n\n\n\n","category":"method"},{"location":"internal_methods/#CantStop.is_combination-Tuple{Any, Any}","page":"Internal Methods","title":"CantStop.is_combination","text":"is_combination(outcome, columns)\n\nTests whether columns are a possible some of dice outcome.\n\nArguments\n\noutcome: a vector of dice outcomes \nc_idx: a vector of sums based on pairs of dice outcomes \n\nKeywords\n\nfun=all: a function for testing the combinations \n\n\n\n\n\n","category":"method"},{"location":"internal_methods/#CantStop.move!-Tuple{AbstractGame, Any, Any}","page":"Internal Methods","title":"CantStop.move!","text":"move!(game::AbstractGame, c_idx, r_idx)\n\nMove runner to location determined by column and row index\n\nArguments\n\ngame::AbstractGame: an abstract game object \nc_idx: column index \nr_idx: row index\n\n\n\n\n\n","category":"method"},{"location":"internal_methods/#CantStop.play_round!-Tuple{AbstractGame, AbstractPlayer}","page":"Internal Methods","title":"CantStop.play_round!","text":"play_round!(game::AbstractGame, player::AbstractPlayer)\n\nPlay one round with a specified player.\n\nArguments\n\ngame::AbstractGame: an abstract game object \nplayer::AbstractPlayer: an subtype of a abstract player\n\n\n\n\n\n","category":"method"},{"location":"internal_methods/#CantStop.remove_pieces!-Tuple{AbstractGame, Any}","page":"Internal Methods","title":"CantStop.remove_pieces!","text":"remove_pieces!(game::AbstractGame, player_id)\n\nArguments\n\ngame::AbstractGame: an abstract game object \nplayer::AbstractPlayer: an subtype of a abstract player\n\n\n\n\n\n","category":"method"},{"location":"internal_methods/#CantStop.replace_runners!-Tuple{AbstractGame, Any}","page":"Internal Methods","title":"CantStop.replace_runners!","text":"replace_runners!(game::AbstractGame, player_id)\n\nReplaces runners with player_id.\n\nArguments\n\ngame::AbstractGame: an abstract game object \nplayer::AbstractPlayer: an subtype of a abstract player\n\n\n\n\n\n","category":"method"},{"location":"internal_methods/#CantStop.runner_selection_phase!-Tuple{AbstractGame, AbstractPlayer}","page":"Internal Methods","title":"CantStop.runner_selection_phase!","text":"runner_selection_phase!(game::AbstractGame, player::AbstractPlayer)\n\nImplements the runner selection phase in which the player performs two dice rolls to select runners. The function select_runners! is called during this phase.\n\nArguments\n\ngame::AbstractGame: an abstract game object \nplayer::AbstractPlayer: an subtype of a abstract player\n\n\n\n\n\n","category":"method"},{"location":"internal_methods/#CantStop.setup!-Tuple{AbstractPlayer, Any}","page":"Internal Methods","title":"CantStop.setup!","text":"setup!(player::AbstractPlayer, ids)\n\nPerform initial setup after cards are delt, but before the game begins.\n\nArguments\n\nplayer: a player object\nids: all player ids\n\n\n\n\n\n","category":"method"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"using CantStop\nimport CantStop: select_positions\nimport CantStop: select_runners\nimport CantStop: take_chance\n\n","category":"page"},{"location":"basic_usage/#Introduction","page":"Basic Usage","title":"Introduction","text":"","category":"section"},{"location":"basic_usage/#Example","page":"Basic Usage","title":"Example","text":"","category":"section"},{"location":"basic_usage/#Dependencies","page":"Basic Usage","title":"Dependencies","text":"","category":"section"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"using CantStop\nimport CantStop: select_positions\nimport CantStop: select_runners\nimport CantStop: take_chance","category":"page"},{"location":"basic_usage/#Make-Player-Type","page":"Basic Usage","title":"Make Player Type","text":"","category":"section"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"struct Player <: AbstractPlayer\n    id::Symbol\n    pieces::Vector{Symbol}\nend\nPlayer(;id) = Player(id, fill(id, 12))","category":"page"},{"location":"basic_usage/#Required-Methods","page":"Basic Usage","title":"Required Methods","text":"","category":"section"},{"location":"basic_usage/#select_runners","page":"Basic Usage","title":"select_runners","text":"","category":"section"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"function select_runners(game::AbstractGame, player::Player, outcome, i)\n    c_idx = Int[]\n    r_idx = Int[]\n    # on first attempt, 2 positions are given, but only 1 position on the second attempt\n    for j ∈ 1:(3 - i)\n        # columns are the sum of the first two dice and the sum of the last two dice \n        k = 2 * (j - 1) + 1\n        push!(c_idx, outcome[k] + outcome[k+1])\n        _idx = findfirst(x -> player.id ∈ x, game.columns[c_idx[j]])\n        # if the player does not have a piece in the column, start at position 1, otherwise put\n        # runner in the next position\n        idx = isnothing(_idx) ? 1 : _idx + 1\n        push!(r_idx, idx)\n    end\n    return c_idx, r_idx\nend","category":"page"},{"location":"basic_usage/#take_chance","page":"Basic Usage","title":"take_chance","text":"","category":"section"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"take_chance(game::AbstractGame, player::Player) = rand(Bool)\n","category":"page"},{"location":"basic_usage/#select_positions","page":"Basic Usage","title":"select_positions","text":"","category":"section"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"function select_positions(game::AbstractGame, player::Player, outcome)\n    # all possible columns\n    possible_cols = list_sums(game, outcome)\n    # activate columns containing a runner \n    c_idx, r_idx = get_runner_locations(game)\n    # possible columns which are also active \n    matching_cols = intersect(possible_cols, c_idx)\n    # get the first available active column index \n    m = findfirst(x -> x == matching_cols[1], c_idx)\n    return [c_idx[m],],[r_idx[m],]\nend","category":"page"},{"location":"basic_usage/#Run-Simulation","page":"Basic Usage","title":"Run Simulation","text":"","category":"section"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"game = Game()\n\nplayers = [Player(id=:p1), Player(id=:p2)]\n\n#simulate(game, players)","category":"page"},{"location":"#CantStop.jl","page":"Home","title":"CantStop.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CantStop.jl","category":"page"}]
}
